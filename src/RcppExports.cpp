// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// swig_omp
RcppExport SEXP swig_omp(SEXP X, SEXP D, SEXP return_reg_path, SEXP given_L, SEXP L, SEXP given_eps, SEXP eps, SEXP given_Lambda, SEXP Lambda, SEXP numThreads);
RcppExport SEXP _GSCAD_swig_omp(SEXP XSEXP, SEXP DSEXP, SEXP return_reg_pathSEXP, SEXP given_LSEXP, SEXP LSEXP, SEXP given_epsSEXP, SEXP epsSEXP, SEXP given_LambdaSEXP, SEXP LambdaSEXP, SEXP numThreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< SEXP >::type D(DSEXP);
    Rcpp::traits::input_parameter< SEXP >::type return_reg_path(return_reg_pathSEXP);
    Rcpp::traits::input_parameter< SEXP >::type given_L(given_LSEXP);
    Rcpp::traits::input_parameter< SEXP >::type L(LSEXP);
    Rcpp::traits::input_parameter< SEXP >::type given_eps(given_epsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type given_Lambda(given_LambdaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type numThreads(numThreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(swig_omp(X, D, return_reg_path, given_L, L, given_eps, eps, given_Lambda, Lambda, numThreads));
    return rcpp_result_gen;
END_RCPP
}
// swig_lassoD
RcppExport SEXP swig_lassoD(SEXP X, SEXP D, SEXP return_reg_path, SEXP L, SEXP constraint, SEXP lambda2, SEXP mode, SEXP pos, SEXP ols, SEXP numThreads, SEXP max_length_path, SEXP verbose, SEXP cholevsky);
RcppExport SEXP _GSCAD_swig_lassoD(SEXP XSEXP, SEXP DSEXP, SEXP return_reg_pathSEXP, SEXP LSEXP, SEXP constraintSEXP, SEXP lambda2SEXP, SEXP modeSEXP, SEXP posSEXP, SEXP olsSEXP, SEXP numThreadsSEXP, SEXP max_length_pathSEXP, SEXP verboseSEXP, SEXP cholevskySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< SEXP >::type D(DSEXP);
    Rcpp::traits::input_parameter< SEXP >::type return_reg_path(return_reg_pathSEXP);
    Rcpp::traits::input_parameter< SEXP >::type L(LSEXP);
    Rcpp::traits::input_parameter< SEXP >::type constraint(constraintSEXP);
    Rcpp::traits::input_parameter< SEXP >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pos(posSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ols(olsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type numThreads(numThreadsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type max_length_path(max_length_pathSEXP);
    Rcpp::traits::input_parameter< SEXP >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< SEXP >::type cholevsky(cholevskySEXP);
    rcpp_result_gen = Rcpp::wrap(swig_lassoD(X, D, return_reg_path, L, constraint, lambda2, mode, pos, ols, numThreads, max_length_path, verbose, cholevsky));
    return rcpp_result_gen;
END_RCPP
}
// swig_lassoQq
RcppExport SEXP swig_lassoQq(SEXP X, SEXP Q, SEXP q, SEXP return_reg_path, SEXP L, SEXP constraint, SEXP lambda2, SEXP mode, SEXP pos, SEXP ols, SEXP numThreads, SEXP max_length_path, SEXP verbose, SEXP cholevsky);
RcppExport SEXP _GSCAD_swig_lassoQq(SEXP XSEXP, SEXP QSEXP, SEXP qSEXP, SEXP return_reg_pathSEXP, SEXP LSEXP, SEXP constraintSEXP, SEXP lambda2SEXP, SEXP modeSEXP, SEXP posSEXP, SEXP olsSEXP, SEXP numThreadsSEXP, SEXP max_length_pathSEXP, SEXP verboseSEXP, SEXP cholevskySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Q(QSEXP);
    Rcpp::traits::input_parameter< SEXP >::type q(qSEXP);
    Rcpp::traits::input_parameter< SEXP >::type return_reg_path(return_reg_pathSEXP);
    Rcpp::traits::input_parameter< SEXP >::type L(LSEXP);
    Rcpp::traits::input_parameter< SEXP >::type constraint(constraintSEXP);
    Rcpp::traits::input_parameter< SEXP >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pos(posSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ols(olsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type numThreads(numThreadsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type max_length_path(max_length_pathSEXP);
    Rcpp::traits::input_parameter< SEXP >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< SEXP >::type cholevsky(cholevskySEXP);
    rcpp_result_gen = Rcpp::wrap(swig_lassoQq(X, Q, q, return_reg_path, L, constraint, lambda2, mode, pos, ols, numThreads, max_length_path, verbose, cholevsky));
    return rcpp_result_gen;
END_RCPP
}
// swig_lassoMask
RcppExport SEXP swig_lassoMask(SEXP X, SEXP D, SEXP B, SEXP L, SEXP constraint, SEXP lambda2, SEXP mode, SEXP pos, SEXP numThreads, SEXP verbose);
RcppExport SEXP _GSCAD_swig_lassoMask(SEXP XSEXP, SEXP DSEXP, SEXP BSEXP, SEXP LSEXP, SEXP constraintSEXP, SEXP lambda2SEXP, SEXP modeSEXP, SEXP posSEXP, SEXP numThreadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< SEXP >::type D(DSEXP);
    Rcpp::traits::input_parameter< SEXP >::type B(BSEXP);
    Rcpp::traits::input_parameter< SEXP >::type L(LSEXP);
    Rcpp::traits::input_parameter< SEXP >::type constraint(constraintSEXP);
    Rcpp::traits::input_parameter< SEXP >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pos(posSEXP);
    Rcpp::traits::input_parameter< SEXP >::type numThreads(numThreadsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(swig_lassoMask(X, D, B, L, constraint, lambda2, mode, pos, numThreads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// swig_lassoWeighted
RcppExport SEXP swig_lassoWeighted(SEXP X, SEXP D, SEXP W, SEXP L, SEXP constraint, SEXP mode, SEXP pos, SEXP numThreads, SEXP verbose);
RcppExport SEXP _GSCAD_swig_lassoWeighted(SEXP XSEXP, SEXP DSEXP, SEXP WSEXP, SEXP LSEXP, SEXP constraintSEXP, SEXP modeSEXP, SEXP posSEXP, SEXP numThreadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< SEXP >::type D(DSEXP);
    Rcpp::traits::input_parameter< SEXP >::type W(WSEXP);
    Rcpp::traits::input_parameter< SEXP >::type L(LSEXP);
    Rcpp::traits::input_parameter< SEXP >::type constraint(constraintSEXP);
    Rcpp::traits::input_parameter< SEXP >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pos(posSEXP);
    Rcpp::traits::input_parameter< SEXP >::type numThreads(numThreadsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(swig_lassoWeighted(X, D, W, L, constraint, mode, pos, numThreads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// D2optim_mat
NumericMatrix D2optim_mat(NumericMatrix A, double lambda, double c, double rho);
RcppExport SEXP _GSCAD_D2optim_mat(SEXP ASEXP, SEXP lambdaSEXP, SEXP cSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(D2optim_mat(A, lambda, c, rho));
    return rcpp_result_gen;
END_RCPP
}
// pgscad
double pgscad(NumericMatrix D, double c, double lambda);
RcppExport SEXP _GSCAD_pgscad(SEXP DSEXP, SEXP cSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type D(DSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(pgscad(D, c, lambda));
    return rcpp_result_gen;
END_RCPP
}
// imageSplit
NumericMatrix imageSplit(NumericMatrix A, int m, int n, int stepsize);
RcppExport SEXP _GSCAD_imageSplit(SEXP ASEXP, SEXP mSEXP, SEXP nSEXP, SEXP stepsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type stepsize(stepsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(imageSplit(A, m, n, stepsize));
    return rcpp_result_gen;
END_RCPP
}
// imageReCon
NumericMatrix imageReCon(NumericMatrix B, int mm, int nn, int m, int n, int stepsize);
RcppExport SEXP _GSCAD_imageReCon(SEXP BSEXP, SEXP mmSEXP, SEXP nnSEXP, SEXP mSEXP, SEXP nSEXP, SEXP stepsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type mm(mmSEXP);
    Rcpp::traits::input_parameter< int >::type nn(nnSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type stepsize(stepsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(imageReCon(B, mm, nn, m, n, stepsize));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP swig_lassoD(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP swig_lassoMask(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP swig_lassoQq(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP swig_lassoWeighted(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP swig_omp(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_GSCAD_swig_omp", (DL_FUNC) &_GSCAD_swig_omp, 10},
    {"_GSCAD_swig_lassoD", (DL_FUNC) &_GSCAD_swig_lassoD, 13},
    {"_GSCAD_swig_lassoQq", (DL_FUNC) &_GSCAD_swig_lassoQq, 14},
    {"_GSCAD_swig_lassoMask", (DL_FUNC) &_GSCAD_swig_lassoMask, 10},
    {"_GSCAD_swig_lassoWeighted", (DL_FUNC) &_GSCAD_swig_lassoWeighted, 9},
    {"_GSCAD_D2optim_mat", (DL_FUNC) &_GSCAD_D2optim_mat, 4},
    {"_GSCAD_pgscad", (DL_FUNC) &_GSCAD_pgscad, 3},
    {"_GSCAD_imageSplit", (DL_FUNC) &_GSCAD_imageSplit, 4},
    {"_GSCAD_imageReCon", (DL_FUNC) &_GSCAD_imageReCon, 6},
    {"swig_lassoD",               (DL_FUNC) &swig_lassoD,               13},
    {"swig_lassoMask",            (DL_FUNC) &swig_lassoMask,            10},
    {"swig_lassoQq",              (DL_FUNC) &swig_lassoQq,              14},
    {"swig_lassoWeighted",        (DL_FUNC) &swig_lassoWeighted,         9},
    {"swig_omp",                  (DL_FUNC) &swig_omp,                  10},
    {NULL, NULL, 0}
};

RcppExport void R_init_GSCAD(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
